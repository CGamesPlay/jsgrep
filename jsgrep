#!/usr/bin/env node

var fs = require('fs');
var _ = require('underscore');

var Narcissus = require('narcissus/main');

/// Used to print the matching snippet rather than the first line of it.
const PRINT_FIRST_LINE = 'first-line';
const PRINT_ONLY_MATCHING = 'only-matching';
const PRINT_METAVAR = 'metavar';
const PRINT_FILES_NOT_MATCHING = 'files-not-matching';
const PRINT_FILES_MATCHING = 'files-matching';

var config = {
  patterns: [ ],
  paths: [ ],
  strictMatches: false,
  print: PRINT_FIRST_LINE,
  printMetavar: null,
  lineNumber: false,
  filename: null,
  dumpAst: false,
};

function usage(hasError) {
  if (hasError) {
    console.log("See jsgrep --help for usage information.");
    process.exit(hasError ? 1 : 0);
  }
  console.log("jsgrep: Syntactically aware grep for JavaScript");
  console.log("");
  console.log("Usage: jsgrep [OPTIONS] PATTERN FILES...");
  console.log("");
  console.log("Search specifiers:");
  console.log("  -e, --pattern=PATTERN     Pattern to search for. Multiples allowed.");
  console.log("  -S, --strict-matches      Require exact matches for object initializers, etc.");
  console.log("      --dump-ast            Dump the AST for the patterns and exit.");
  console.log("");
  console.log("Output control:");
  console.log("  -o, --only-matching       Print only the expression that matched.");
  console.log("  -p, --print=VAR           Print only the named matching metavariable.");
  console.log("  -n, --line-number         Print the line number with output lines.");
  console.log("  -H, --with-filename       Print the filename for each match.");
  console.log("  -h, --no-filename         Do not print the filename for each match.");
  console.log("  -L, --files-without-match Only print file names with no matches.");
  console.log("  -l, --files-with-matches  Only print file names with matches.");
  process.exit(0);
}

(function parseArgs() {
  var getopt = require('node-getopt');
  var parser = new getopt.BasicParser(
    'e:(pattern)S(strict-matches)D(dump-ast)o(only-matching)p:(print)' +
    'n(line-number)H(with-filename)h(no-filename)L(files-without-match)' +
    'l(files-with-matches)_(help)',
    process.argv);

  while ((option = parser.getopt()) !== undefined) {
    switch(option.option) {
      case 'e':
        config.patterns.push(option.optarg);
        break;
      case 'S':
        config.strictMatches = true;
        break;
      case 'D':
        config.dumpAst = true;
        break;
      case 'o':
        config.print = PRINT_ONLY_MATCHING;
        break;
      case 'p':
        config.print = PRINT_METAVAR;
        config.printMetavar = option.optarg;
        break;
      case 'n':
        config.lineNumber = true;
        break;
      case 'H':
        config.filename = true;
        break;
      case 'h':
        config.filename = false;
        break;
      case 'L':
        config.print = PRINT_FILES_NOT_MATCHING;
        break;
      case 'l':
        config.print = PRINT_FILES_MATCHING;
        break;
      case '?':
      case '_':
        usage(option.error);
        break;
    }
  }

  config.paths = process.argv.slice(parser.optind());

  if (config.patterns.length == 0 && config.paths.length > 0) {
    config.patterns.push(config.paths.shift());
  }

  if (config.patterns.length == 0) {
    console.error("At least one pattern must be specified.");
    usage(true);
  }

  if (config.filename === null) {
    config.filename = config.paths.length > 1;
  }
})();

var patternsAst = [];
for (var i = 0; i < config.patterns.length; i++) {
  var pattern = config.patterns[i];
  var patternAst = Narcissus.parser.parse(pattern, 'pattern', 0);
  if (patternAst.children.length == 1) {
    // Discard the script node
    patternAst = patternAst.children[0];
  }

  if (patternAst.type == Narcissus.definitions.tokenIds.SEMICOLON &&
      pattern.substr(pattern.length - 1) != ';') {
    // Searching for single expression, discard the semicolon node
    patternAst = patternAst.expression;
  }

  patternsAst[i] = patternAst;
}

if (config.dumpAst) {
  _.each(patternsAst, function(ast, i) {
    console.log("Pattern: " + config.patterns[i]);
    console.log(ast.toString());
  });
  process.exit(0);
}

for (var i = 0; i < config.paths.length; i++) {
  var fileHasMatch = false;
  var source = fs.readFileSync(config.paths[i]).toString();
  // If the first character is a shebang, comment it out
  if (source.substr(0, 2) == '#!') {
    source = "// " + source;
  }

  var sourceLines = null;
  if (config.print == PRINT_FIRST_LINE) {
    sourceLines = source.split('\n');
  }

  try {
    var ast = Narcissus.parser.parse(source, config.paths[i], 1);
  } catch(e) {
    console.warn(e.message);
  }

  try {
    require('./lib/jsgrep.js').jsgrep({
      source: ast,
      patterns: patternsAst,
      strictMatches: config.strictMatches,
      callback: function(node, variables) {
        var output = false, lineNumber = node.lineno;

        fileHasMatch = true;

        if (config.print === PRINT_FIRST_LINE) {
          output = sourceLines[node.lineno - 1];
        } else if (config.print === PRINT_ONLY_MATCHING) {
          output = node.tokenizer.source.substring(node.start, node.end);
        } else if (config.print === PRINT_METAVAR) {
          if (!variables[config.printMetavar]) {
            throw {
              message: "Metavariable " + config.printMetavar +
                " is not bound to any expression."
            };
          } else {
            var matchNode = variables[config.printMetavar];
            output = matchNode.tokenizer.source.substring(
              matchNode.start, matchNode.end);
            lineNumber = matchNode.lineno;
          }
        } else {
          // Print filenames, so bail the search for speed
          throw 'done';
        }
        if (output) {
          if (output.indexOf('\n') > 0) {
            output = output.substr(0, output.indexOf('\n'));
          }
          console.log((config.filename ? config.paths[i] + ":" : "") +
                      (config.lineNumber ? lineNumber + ":" : "") +
                      output);
        }
      }
    });
  } catch(e) {
    if (!(e instanceof Error) && e.message) {
      console.error("jsgrep: " + e.message);
      process.exit(1);
    }
    if (e !== 'done') {
      throw e;
    }
  }

  if (config.print == PRINT_FILES_NOT_MATCHING && !fileHasMatch ||
      config.print == PRINT_FILES_MATCHING && fileHasMatch) {
    console.log(config.paths[i]);
  }
}

// vim: ft=javascript
